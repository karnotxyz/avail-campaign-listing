{"version":3,"file":"prune.js","sourceRoot":"","sources":["../../../src/eslint-bulk-suppressions/cli/prune.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,iDAAoD;AACpD,2DAAsD;AACtD,mDAAoD;AAEpD,SAAgB,KAAK;IACnB,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAEnC,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;QACnD,IAAA,2BAAc,GAAE,CAAC;QACjB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;IAED,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,8CAA8C,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAClF,CAAC;IAED,MAAM,SAAS,GAAG,IAAA,6BAAY,EAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;IAE9C,MAAM,GAAG,mCAA2B,OAAO,CAAC,GAAG,KAAE,iBAAiB,EAAE,MAAM,GAAE,CAAC;IAE7E,IAAA,oBAAI,EACF,GAAG,SAAS,kBAAkB,EAC9B,EAAE,GAAG,EAAE,EACP,CAAC,KAA2B,EAAE,MAAc,EAAE,MAAc,EAAE,EAAE;QAC9D,8EAA8E;QAC9E,sEAAsE;QACtE,MAAM,0BAA0B,GAAG,uBAAuB,CAAC;QAC3D,MAAM,aAAa,GAAG,KAAK,KAAK,IAAI,IAAI,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,0BAA0B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAEpG,IAAI,KAAK,IAAI,CAAC,aAAa,EAAE,CAAC;YAC5B,MAAM,IAAI,KAAK,CAAC,2CAA2C,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAC9E,CAAC;QAED,IAAI,MAAM,EAAE,CAAC;YACX,MAAM,IAAI,KAAK,CAAC,yCAAyC,MAAM,EAAE,CAAC,CAAC;QACrE,CAAC;QAED,OAAO,CAAC,GAAG,CACT,+HAA+H,OAAO,CAAC,GAAG,EAAE,EAAE,CAC/I,CAAC;IACJ,CAAC,CACF,CAAC;AACJ,CAAC;AAtCD,sBAsCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { ExecException, exec } from 'child_process';\nimport { getEslintCli } from './utils/get-eslint-cli';\nimport { printPruneHelp } from './utils/print-help';\n\nexport function prune() {\n  const args = process.argv.slice(3);\n\n  if (args.includes('--help') || args.includes('-h')) {\n    printPruneHelp();\n    process.exit(0);\n  }\n\n  if (args.length > 0) {\n    throw new Error(`@rushstack/eslint-bulk: Unknown arguments: ${args.join(' ')}`);\n  }\n\n  const eslintCLI = getEslintCli(process.cwd());\n\n  const env: NodeJS.ProcessEnv = { ...process.env, ESLINT_BULK_PRUNE: 'true' };\n\n  exec(\n    `${eslintCLI} . --format=json`,\n    { env },\n    (error: ExecException | null, stdout: string, stderr: string) => {\n      // if errorCount != 0, ESLint will process.exit(1) giving the false impression\n      // that the exec failed, even though linting errors are to be expected\n      const eslintOutputWithErrorRegex = /\"errorCount\":(?!0)\\d+/;\n      const isEslintError = error !== null && error.code === 1 && eslintOutputWithErrorRegex.test(stdout);\n\n      if (error && !isEslintError) {\n        throw new Error(`@rushstack/eslint-bulk execution error: ${error.message}`);\n      }\n\n      if (stderr) {\n        throw new Error(`@rushstack/eslint-bulk ESLint errors: ${stderr}`);\n      }\n\n      console.log(\n        `@rushstack/eslint-bulk: Successfully pruned unused suppressions in all .eslint-bulk-suppressions.json files under directory ${process.cwd()}`\n      );\n    }\n  );\n}\n"]}