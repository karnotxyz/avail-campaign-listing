{"version":3,"names":["Definition","PatternVisitor","OriginalPatternVisitor","Referencer","OriginalReferencer","Scope","ScopeManager","require","getKeys","fallback","visitorKeysMap","getVisitorValues","nodeType","client","FLOW_FLIPPED_ALIAS_KEYS","VISITOR_KEYS","getTypesInfo","flowFlippedAliasKeys","concat","Object","entries","reduce","acc","key","value","includes","propertyTypes","callProperties","type","values","indexers","properties","types","params","argument","elementType","qualification","rest","returnType","typeAnnotation","typeParameters","id","ArrayPattern","node","elements","forEach","visit","ObjectPattern","_client","WeakMap","constructor","options","scopeManager","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","visitPattern","callback","_checkIdentifierOrVisit","left","processRightHandNodes","visitor","rightHandNodes","visitClass","_node$superTypeParame","_visitArray","decorators","typeParamScope","_nestTypeParamScope","_visitTypeAnnotation","implements","superTypeParameters","close","visitFunction","visitProperty","_node$value","InterfaceDeclaration","_createScopeVariable","extends","body","TypeAlias","right","ClassProperty","_visitClassProperty","ClassPrivateProperty","PropertyDefinition","ClassPrivateMethod","MethodDefinition","DeclareModule","_visitDeclareX","DeclareFunction","DeclareVariable","DeclareClass","OptionalMemberExpression","MemberExpression","computed","__nestClassFieldInitializerScope","__nestScope","__currentScope","name","currentScope","variableScope","__define","parentScope","scope","j","length","bind","Array","isArray","visitorValues","_classPrivateFieldGet","i","visitorValue","propertyType","nodeProperty","k","loopPropertyNode","l","nodeList","module","exports","analyzeScope","ast","parserOptions","_parserOptions$ecmaFe","ignoreEval","optimistic","directive","nodejsScope","sourceType","ecmaFeatures","globalReturn","impliedStrict","ecmaVersion","childVisitorKeys","getVisitorKeys","referencer"],"sources":["../src/analyze-scope.cts"],"sourcesContent":["import type { Client } from \"./client.cts\";\n\nconst {\n  Definition,\n  PatternVisitor: OriginalPatternVisitor,\n  Referencer: OriginalReferencer,\n  Scope,\n  ScopeManager,\n} = (\n  process.env.BABEL_8_BREAKING\n    ? require(\"eslint-scope\")\n    : require(\"@nicolo-ribaudo/eslint-scope-5-internals\")\n) as import(\"./types.cts\").Scope;\nconst { getKeys: fallback } = require(\"eslint-visitor-keys\");\n\nlet visitorKeysMap: Record<string, string[]>;\nfunction getVisitorValues(nodeType: string, client: Client) {\n  if (visitorKeysMap) return visitorKeysMap[nodeType];\n\n  const { FLOW_FLIPPED_ALIAS_KEYS, VISITOR_KEYS } = client.getTypesInfo();\n\n  const flowFlippedAliasKeys = FLOW_FLIPPED_ALIAS_KEYS.concat([\n    \"ArrayPattern\",\n    \"ClassDeclaration\",\n    \"ClassExpression\",\n    \"FunctionDeclaration\",\n    \"FunctionExpression\",\n    \"Identifier\",\n    \"ObjectPattern\",\n    \"RestElement\",\n  ]);\n\n  visitorKeysMap = Object.entries(VISITOR_KEYS).reduce((acc, [key, value]) => {\n    if (!flowFlippedAliasKeys.includes(value)) {\n      // @ts-expect-error FIXME: value is not assignable to type string[]\n      acc[key] = value;\n    }\n    return acc;\n  }, {});\n\n  return visitorKeysMap[nodeType];\n}\n\nconst propertyTypes = {\n  // loops\n  callProperties: { type: \"loop\", values: [\"value\"] },\n  indexers: { type: \"loop\", values: [\"key\", \"value\"] },\n  properties: { type: \"loop\", values: [\"argument\", \"value\"] },\n  types: { type: \"loop\" },\n  params: { type: \"loop\" },\n  // single property\n  argument: { type: \"single\" },\n  elementType: { type: \"single\" },\n  qualification: { type: \"single\" },\n  rest: { type: \"single\" },\n  returnType: { type: \"single\" },\n  // others\n  typeAnnotation: { type: \"typeAnnotation\" },\n  typeParameters: { type: \"typeParameters\" },\n  id: { type: \"id\" },\n};\n\nclass PatternVisitor extends OriginalPatternVisitor {\n  ArrayPattern(node: any) {\n    node.elements.forEach(this.visit, this);\n  }\n\n  ObjectPattern(node: any) {\n    node.properties.forEach(this.visit, this);\n  }\n}\n\nclass Referencer extends OriginalReferencer {\n  #client;\n\n  constructor(options: any, scopeManager: any, client: Client) {\n    super(options, scopeManager);\n    this.#client = client;\n  }\n\n  // inherits.\n  visitPattern(node: any, options: any, callback: any) {\n    if (!node) {\n      return;\n    }\n\n    // Visit type annotations.\n    this._checkIdentifierOrVisit(node.typeAnnotation);\n    if (node.type === \"AssignmentPattern\") {\n      this._checkIdentifierOrVisit(node.left.typeAnnotation);\n    }\n\n    // Overwrite `super.visitPattern(node, options, callback)` in order to not visit `ArrayPattern#typeAnnotation` and `ObjectPattern#typeAnnotation`.\n    if (typeof options === \"function\") {\n      callback = options;\n      options = { processRightHandNodes: false };\n    }\n\n    const visitor = new PatternVisitor(this.options, node, callback);\n    visitor.visit(node);\n\n    // Process the right hand nodes recursively.\n    if (options.processRightHandNodes) {\n      visitor.rightHandNodes.forEach(this.visit, this);\n    }\n  }\n\n  // inherits.\n  visitClass(node: any) {\n    // Decorators.\n    this._visitArray(node.decorators);\n\n    // Flow type parameters.\n    const typeParamScope = this._nestTypeParamScope(node);\n\n    // Flow super types.\n    this._visitTypeAnnotation(node.implements);\n    this._visitTypeAnnotation(node.superTypeParameters?.params);\n\n    // Basic.\n    super.visitClass(node);\n\n    // Close the type parameter scope.\n    if (typeParamScope) {\n      this.close(node);\n    }\n  }\n\n  // inherits.\n  visitFunction(node: any) {\n    const typeParamScope = this._nestTypeParamScope(node);\n\n    // Flow return types.\n    this._checkIdentifierOrVisit(node.returnType);\n\n    // Basic.\n    super.visitFunction(node);\n\n    // Close the type parameter scope.\n    if (typeParamScope) {\n      this.close(node);\n    }\n  }\n\n  // inherits.\n  visitProperty(node: any) {\n    if (node.value?.type === \"TypeCastExpression\") {\n      this._visitTypeAnnotation(node.value);\n    }\n    this._visitArray(node.decorators);\n    super.visitProperty(node);\n  }\n\n  InterfaceDeclaration(node: any) {\n    this._createScopeVariable(node, node.id);\n\n    const typeParamScope = this._nestTypeParamScope(node);\n\n    // TODO: Handle mixins\n    this._visitArray(node.extends);\n    this.visit(node.body);\n\n    if (typeParamScope) {\n      this.close(node);\n    }\n  }\n\n  TypeAlias(node: any) {\n    this._createScopeVariable(node, node.id);\n\n    const typeParamScope = this._nestTypeParamScope(node);\n\n    this.visit(node.right);\n\n    if (typeParamScope) {\n      this.close(node);\n    }\n  }\n\n  ClassProperty(node: any) {\n    this._visitClassProperty(node);\n  }\n\n  ClassPrivateProperty(node: any) {\n    this._visitClassProperty(node);\n  }\n\n  PropertyDefinition(node: any) {\n    this._visitClassProperty(node);\n  }\n\n  // TODO: Update to visit type annotations when TypeScript/Flow support this syntax.\n  ClassPrivateMethod(node: any) {\n    super.MethodDefinition(node);\n  }\n\n  DeclareModule(node: any) {\n    this._visitDeclareX(node);\n  }\n\n  DeclareFunction(node: any) {\n    this._visitDeclareX(node);\n  }\n\n  DeclareVariable(node: any) {\n    this._visitDeclareX(node);\n  }\n\n  DeclareClass(node: any) {\n    this._visitDeclareX(node);\n  }\n\n  // visit OptionalMemberExpression as a MemberExpression.\n  OptionalMemberExpression(node: any) {\n    super.MemberExpression(node);\n  }\n\n  _visitClassProperty(node: any) {\n    const { computed, key, typeAnnotation, decorators, value } = node;\n\n    this._visitArray(decorators);\n    if (computed) this.visit(key);\n    this._visitTypeAnnotation(typeAnnotation);\n\n    if (value) {\n      if (this.scopeManager.__nestClassFieldInitializerScope) {\n        this.scopeManager.__nestClassFieldInitializerScope(value);\n      } else {\n        // Given that ESLint 7 didn't have a \"class field initializer\" scope,\n        // we create a plain method scope. Semantics are the same.\n        this.scopeManager.__nestScope(\n          new Scope(\n            this.scopeManager,\n            \"function\",\n            this.scopeManager.__currentScope,\n            value,\n            true,\n          ),\n        );\n      }\n      this.visit(value);\n      this.close(value);\n    }\n  }\n\n  _visitDeclareX(node: any) {\n    if (node.id) {\n      this._createScopeVariable(node, node.id);\n    }\n\n    const typeParamScope = this._nestTypeParamScope(node);\n    if (typeParamScope) {\n      this.close(node);\n    }\n  }\n\n  _createScopeVariable(node: any, name: any) {\n    this.currentScope().variableScope.__define(\n      name,\n      new Definition(\"Variable\", name, node, null, null, null),\n    );\n  }\n\n  _nestTypeParamScope(node: any) {\n    if (!node.typeParameters) {\n      return null;\n    }\n\n    const parentScope = this.scopeManager.__currentScope;\n    const scope = new Scope(\n      this.scopeManager,\n      \"type-parameters\",\n      parentScope,\n      node,\n      false,\n    );\n\n    this.scopeManager.__nestScope(scope);\n    for (let j = 0; j < node.typeParameters.params.length; j++) {\n      const name = node.typeParameters.params[j];\n      scope.__define(name, new Definition(\"TypeParameter\", name, name));\n      if (name.typeAnnotation) {\n        this._checkIdentifierOrVisit(name);\n      }\n    }\n    scope.__define = parentScope.__define.bind(parentScope);\n\n    return scope;\n  }\n\n  _visitTypeAnnotation(node: any) {\n    if (!node) {\n      return;\n    }\n    if (Array.isArray(node)) {\n      node.forEach(this._visitTypeAnnotation, this);\n      return;\n    }\n\n    // get property to check (params, id, etc...)\n    const visitorValues = getVisitorValues(node.type, this.#client);\n    if (!visitorValues) {\n      return;\n    }\n\n    // can have multiple properties\n    for (let i = 0; i < visitorValues.length; i++) {\n      const visitorValue = visitorValues[i];\n      const propertyType = (propertyTypes as Record<string, any>)[visitorValue];\n      const nodeProperty = node[visitorValue];\n      // check if property or type is defined\n      if (propertyType == null || nodeProperty == null) {\n        continue;\n      }\n      if (propertyType.type === \"loop\") {\n        for (let j = 0; j < nodeProperty.length; j++) {\n          if (Array.isArray(propertyType.values)) {\n            for (let k = 0; k < propertyType.values.length; k++) {\n              const loopPropertyNode = nodeProperty[j][propertyType.values[k]];\n              if (loopPropertyNode) {\n                this._checkIdentifierOrVisit(loopPropertyNode);\n              }\n            }\n          } else {\n            this._checkIdentifierOrVisit(nodeProperty[j]);\n          }\n        }\n      } else if (propertyType.type === \"single\") {\n        this._checkIdentifierOrVisit(nodeProperty);\n      } else if (propertyType.type === \"typeAnnotation\") {\n        this._visitTypeAnnotation(node.typeAnnotation);\n      } else if (propertyType.type === \"typeParameters\") {\n        for (let l = 0; l < node.typeParameters.params.length; l++) {\n          this._checkIdentifierOrVisit(node.typeParameters.params[l]);\n        }\n      } else if (propertyType.type === \"id\") {\n        if (node.id.type === \"Identifier\") {\n          this._checkIdentifierOrVisit(node.id);\n        } else {\n          this._visitTypeAnnotation(node.id);\n        }\n      }\n    }\n  }\n\n  _checkIdentifierOrVisit(node: any) {\n    if (node?.typeAnnotation) {\n      this._visitTypeAnnotation(node.typeAnnotation);\n    } else if (node?.type === \"Identifier\") {\n      this.visit(node);\n    } else {\n      this._visitTypeAnnotation(node);\n    }\n  }\n\n  _visitArray(nodeList: any[]) {\n    if (nodeList) {\n      for (const node of nodeList) {\n        this.visit(node);\n      }\n    }\n  }\n}\n\nexport = function analyzeScope(ast: any, parserOptions: any, client: Client) {\n  const options = {\n    ignoreEval: true,\n    optimistic: false,\n    directive: false,\n    nodejsScope:\n      ast.sourceType === \"script\" &&\n      parserOptions.ecmaFeatures?.globalReturn === true,\n    impliedStrict: false,\n    sourceType: ast.sourceType,\n    ecmaVersion: parserOptions.ecmaVersion,\n    fallback,\n    childVisitorKeys: client.getVisitorKeys(),\n  };\n\n  const scopeManager = new ScopeManager(options);\n  const referencer = new Referencer(options, scopeManager, client);\n\n  referencer.visit(ast);\n\n  return scopeManager as any;\n};\n"],"mappings":"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"}